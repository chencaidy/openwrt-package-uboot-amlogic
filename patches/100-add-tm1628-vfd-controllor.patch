diff --git a/cmd/Kconfig b/cmd/Kconfig
index a9fb4eead2..173cde1008 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -1916,6 +1916,13 @@ config CMD_UUID
 	  The two commands are very similar except for the endianness of the
 	  output.
 
+config CMD_VFD
+	bool "VFD commands support"
+	depends on VFD
+	default y if VFD
+	help
+	  Enables vacuum fluorescent display commands
+
 endmenu
 
 source "cmd/ti/Kconfig"
diff --git a/cmd/Makefile b/cmd/Makefile
index 9d10e07f0e..d54edf94f4 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -187,6 +187,8 @@ obj-$(CONFIG_CMD_ETHSW) += ethsw.o
 obj-$(CONFIG_CMD_AXI) += axi.o
 obj-$(CONFIG_CMD_PVBLOCK) += pvblock.o
 
+obj-$(CONFIG_CMD_VFD) += vfd.o
+
 # Power
 obj-$(CONFIG_CMD_PMIC) += pmic.o
 obj-$(CONFIG_CMD_REGULATOR) += regulator.o
diff --git a/cmd/vfd.c b/cmd/vfd.c
new file mode 100644
index 0000000000..5d8441649f
--- /dev/null
+++ b/cmd/vfd.c
@@ -0,0 +1,183 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#include <common.h>
+#include <command.h>
+#include <dm.h>
+#include <log.h>
+#include <vfd.h>
+
+static int do_vfd_power(struct cmd_tbl *cmdtp, int flag, int argc,
+			char *const argv[])
+{
+	struct udevice *dev;
+	int ret;
+	bool state;
+
+	ret = uclass_get_device(UCLASS_VFD, 0, &dev);
+	if (ret) {
+		printf("Failed to get VFD device, %d\n", ret);
+		return ret;
+	}
+
+	switch (argc) {
+	case 2:
+		if (!strncmp(argv[2], "on", 2))
+			state = true;
+		else if (!strncmp(argv[2], "off", 3))
+			state = false;
+		else
+			return CMD_RET_USAGE;
+
+		vfd_set_enabled(dev, state);
+		break;
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+static int do_vfd_brightness(struct cmd_tbl *cmdtp, int flag, int argc,
+			     char *const argv[])
+{
+	struct udevice *dev;
+	int ret;
+
+	ret = uclass_get_device(UCLASS_VFD, 0, &dev);
+	if (ret) {
+		printf("Failed to get VFD device, %d\n", ret);
+		return ret;
+	}
+
+	switch (argc) {
+	case 2:
+		vfd_set_brightness(dev, simple_strtoul(argv[1], NULL, 10));
+		break;
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+static int do_vfd_title(struct cmd_tbl *cmdtp, int flag, int argc,
+			char *const argv[])
+{
+	struct udevice *dev;
+	int ret;
+
+	ret = uclass_get_device(UCLASS_VFD, 0, &dev);
+	if (ret) {
+		printf("Failed to get VFD device, %d\n", ret);
+		return ret;
+	}
+
+	switch (argc) {
+	case 2:
+		vfd_send_str(dev, argv[1]);
+		break;
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+static int do_vfd_icon(struct cmd_tbl *cmdtp, int flag, int argc,
+		       char *const argv[])
+{
+	struct udevice *dev;
+	int ret;
+	bool state;
+
+	ret = uclass_get_device(UCLASS_VFD, 0, &dev);
+	if (ret) {
+		printf("Failed to get VFD device, %d\n", ret);
+		return ret;
+	}
+
+	switch (argc) {
+	case 3:
+		if (!strncmp(argv[2], "on", 2))
+			state = true;
+		else if (!strncmp(argv[2], "off", 3))
+			state = false;
+		else
+			return CMD_RET_USAGE;
+
+		vfd_send_icon(dev, argv[1], state);
+		break;
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+static int do_vfd_clear(struct cmd_tbl *cmdtp, int flag, int argc,
+			char *const argv[])
+{
+	struct udevice *dev;
+	int ret;
+
+	ret = uclass_get_device(UCLASS_VFD, 0, &dev);
+	if (ret) {
+		printf("Failed to get VFD device, %d\n", ret);
+		return ret;
+	}
+
+	switch (argc) {
+	case 1:
+		vfd_reset(dev);
+		break;
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return 0;
+}
+
+static struct cmd_tbl cmd_vfd_sub[] = {
+	U_BOOT_CMD_MKENT(power, 2, 0, do_vfd_power, "", ""),
+	U_BOOT_CMD_MKENT(brightness, 2, 0, do_vfd_brightness, "", ""),
+	U_BOOT_CMD_MKENT(title, 2, 0, do_vfd_title, "", ""),
+	U_BOOT_CMD_MKENT(icon, 3, 0, do_vfd_icon, "", ""),
+	U_BOOT_CMD_MKENT(clear, 1, 0, do_vfd_clear, "", ""),
+};
+
+/*
+ * Subroutine:  do_vfd
+ *
+ * Description: Handler for 'vfd' command..
+ *
+ * Inputs:	argv[1] contains the subcommand
+ *
+ * Return:	  None
+ *
+ */
+static int do_vfd(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	struct cmd_tbl *c;
+
+	argc--;
+	argv++;
+
+	c = find_cmd_tbl(argv[0], &cmd_vfd_sub[0], ARRAY_SIZE(cmd_vfd_sub));
+
+	if (c)
+		return c->cmd(cmdtp, flag, argc, argv);
+	else
+		return CMD_RET_USAGE;
+}
+
+U_BOOT_CMD(vfd, 5, 1, do_vfd, "vacuum fluorescent display device sub-system",
+	   "power <{on|off}> - vfd power control\n"
+	   "vfd brightness [level] - set vfd display brightness\n"
+	   "vfd title <string> - set vfd display title\n"
+	   "vfd icon <label> <{on|off}> - set vfd display icon\n"
+	   "vfd clear - reset vfd display\n");
diff --git a/drivers/Kconfig b/drivers/Kconfig
index b1ada1cb7f..c732feb30a 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -128,6 +128,8 @@ source "drivers/usb/Kconfig"
 
 source "drivers/ufs/Kconfig"
 
+source "drivers/vfd/Kconfig"
+
 source "drivers/video/Kconfig"
 
 source "drivers/virtio/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index 3510daba29..be754995ed 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -100,6 +100,7 @@ obj-y += rtc/
 obj-y += scsi/
 obj-y += sound/
 obj-y += spmi/
+obj-$(CONFIG_VFD) += vfd/
 obj-y += video/
 obj-y += watchdog/
 obj-$(CONFIG_QE) += qe/
diff --git a/drivers/vfd/Kconfig b/drivers/vfd/Kconfig
new file mode 100644
index 0000000000..2d737e61db
--- /dev/null
+++ b/drivers/vfd/Kconfig
@@ -0,0 +1,25 @@
+#
+# VFD subsystem configuration
+#
+
+menu "Vacuum fluorescent display support"
+
+config VFD
+	bool "Enable VFD controllers support"
+	default no
+	depends on DM
+	help
+	  Support for the vacuum fluorescent display.
+
+if VFD
+
+config VFD_TM1628
+	bool "Enable TM1628 controller"
+	default no
+	depends on DM_SPI
+	help
+	  TM1628 controllers using SPI.
+
+endif
+
+endmenu
diff --git a/drivers/vfd/Makefile b/drivers/vfd/Makefile
new file mode 100644
index 0000000000..280c39f232
--- /dev/null
+++ b/drivers/vfd/Makefile
@@ -0,0 +1,3 @@
+obj-$(CONFIG_VFD) += vfd-uclass.o
+
+obj-$(CONFIG_VFD_TM1628) += vfd_tm1628.o
diff --git a/drivers/vfd/vfd-uclass.c b/drivers/vfd/vfd-uclass.c
new file mode 100644
index 0000000000..30c39b64c0
--- /dev/null
+++ b/drivers/vfd/vfd-uclass.c
@@ -0,0 +1,105 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <dm/device-internal.h>
+#include <log.h>
+#include <vfd.h>
+
+int vfd_send_str(struct udevice *dev, const char *str)
+{
+	const struct vfd_ops *ops = device_get_ops(dev);
+
+	if (!ops->send_str)
+		return -ENOSYS;
+
+	return ops->send_str(dev, str);
+}
+
+int vfd_send_icon(struct udevice *dev, const char *name, bool en)
+{
+	const struct vfd_ops *ops = device_get_ops(dev);
+
+	if (!ops->send_icon)
+		return -ENOSYS;
+
+	return ops->send_icon(dev, name, en);
+}
+
+int vfd_set_enabled(struct udevice *dev, bool val)
+{
+	const struct vfd_ops *ops = device_get_ops(dev);
+
+	if (!ops->set_enabled)
+		return -ENOSYS;
+
+	return ops->set_enabled(dev, val);
+}
+
+int vfd_set_brightness(struct udevice *dev, uint8_t val)
+{
+	const struct vfd_ops *ops = device_get_ops(dev);
+
+	if (!ops->set_brightness)
+		return -ENOSYS;
+
+	return ops->set_brightness(dev, val);
+}
+
+int vfd_reset(struct udevice *dev)
+{
+	const struct vfd_ops *ops = device_get_ops(dev);
+
+	if (!ops->reset)
+		return -ENOSYS;
+
+	return ops->reset(dev);
+}
+
+static int vfd_post_probe(struct udevice *dev)
+{
+	return 0;
+}
+
+int vfd_init(void)
+{
+	struct udevice *dev;
+	struct uclass *class;
+	int ret = 0;
+
+	ret = uclass_get(UCLASS_VFD, &class);
+	if (ret)
+		return ret;
+
+	uclass_foreach_dev(dev, class)
+	{
+		ret = device_probe(dev);
+		if (ret == -ENODEV) {
+			/* No such device. */
+			log_warning("VFD controller not available.\n");
+			continue;
+		}
+
+		if (ret) {
+			/* Other error. */
+			log_err("VFD controller probe failed.\n");
+			continue;
+		}
+	}
+
+	return ret;
+}
+
+UCLASS_DRIVER(vfd) = {
+	.name = "vfd",
+	.id = UCLASS_VFD,
+	.post_probe = vfd_post_probe,
+#if CONFIG_IS_ENABLED(OF_CONTROL)
+	.post_bind = dm_scan_fdt_dev,
+#endif
+};
diff --git a/drivers/vfd/vfd_fonts.h b/drivers/vfd/vfd_fonts.h
new file mode 100644
index 0000000000..711f83d530
--- /dev/null
+++ b/drivers/vfd/vfd_fonts.h
@@ -0,0 +1,105 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#ifndef _FONTS_H_
+#define _FONTS_H_
+
+#define a 0x08
+#define b 0x10
+#define c 0x20
+#define d 0x01
+#define e 0x02
+#define f 0x04
+#define g 0x40
+
+/*
+ *
+ *       +--d/01--+
+ *       |        |
+ *  c/20 |        | e/02
+ *       +--g/40--+
+ *       |        |
+ *  b/10 |        | f/04
+ *       +--a/08--+
+ *
+ */
+
+static const unsigned char seg_decode_tab[] = {
+
+	/* Replace ASCII to number */
+	(a | b | c | d | e | f), // 0
+	(e | f), // 1
+	(a | b | d | e | g), // 2
+	(a | d | e | f | g), // 3
+	(c | e | f | g), // 4
+	(a | c | d | f | g), // 5
+	(a | b | c | d | f | g), // 6
+	(d | e | f), // 7
+	(a | b | c | d | e | f | g), // 8
+	(a | c | d | e | f | g), // 9
+
+	/* ASCII reserved (10-31) */
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+
+	(0), // Space
+
+	/* ASCII Reserved (33-44) */
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+
+	(g), // '-'
+
+	/* ASCII Reserved (46-47) */
+	0, 0,
+
+	(a | b | c | d | e | f), // '0'
+	(e | f), // '1'
+	(a | b | d | e | g), // '2'
+	(a | d | e | f | g), // '3'
+	(c | e | f | g), // '4'
+	(a | c | d | f | g), // '5'
+	(a | b | c | d | f | g), // '6'
+	(d | e | f), // '7'
+	(a | b | c | d | e | f | g), // '8'
+	(a | c | d | e | f | g), // '9'
+
+	/* ASCII Reserved (58-64) */
+	0, 0, 0, 0, 0, 0, 0,
+
+	/* ASCII (A-Z) */
+	(b | c | d | e | f | g), // 'A'
+	(a | b | c | f | g), // 'B'
+	(a | b | c | d), // 'C'
+	(a | b | e | f | g), // 'D'
+	(a | b | c | d | g), // 'E'
+	(b | c | d | g), // 'F'
+	(a | b | c | d | f), // 'G'
+	(b | c | f | g), // 'H'
+	(b | c), // 'I'
+	(a | b | e | f), // 'J'
+	(b | c | d | f | g), // 'K'
+	(a | b | c), // 'L'
+	(b | d | f), // 'M'
+	(b | c | d | e | f), // 'N'
+	(a | b | f | g), // 'O'
+	(b | c | d | e | g), // 'P'
+	(c | d | e | f | g), // 'Q'
+	(b | g), // 'R'
+	(a | c | d | f | g), // 'S'
+	(a | b | c | g), // 'T'
+	(a | b | f), // 'U'
+	(a | b | c | e | f), // 'V'
+	(a | c | e), // 'W'
+	(b | c | e | f | g), // 'X'
+	(a | c | e | f | g), // 'Y'
+	(a | b | d | e | g), // 'Z'
+
+	(a | b | c | d), // '['
+	0, // '/'
+	(a | d | e | f) // ']'
+};
+
+#endif /* _FONTS_H_ */
diff --git a/drivers/vfd/vfd_tm1628.c b/drivers/vfd/vfd_tm1628.c
new file mode 100644
index 0000000000..1a93692bb8
--- /dev/null
+++ b/drivers/vfd/vfd_tm1628.c
@@ -0,0 +1,264 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <vfd.h>
+#include <spi.h>
+#include <linux/types.h>
+
+#include "vfd_tm1628_x96air.h"
+
+#define TM1628_SPI_MAX_CLOCK 100000
+
+/* TM1628 reg masks */
+#define TM1628_MODE_4DIG_CMD ((uint8_t)0x00)
+#define TM1628_MODE_5DIG_CMD ((uint8_t)0x01)
+#define TM1628_MODE_6DIG_CMD ((uint8_t)0x02)
+#define TM1628_MODE_7DIG_CMD ((uint8_t)0x03)
+
+#define TM1628_DATA_DEFAULT ((uint8_t)0x40)
+#define TM1628_DATA_RW_DIR ((uint8_t)0x02)
+#define TM1628_DATA_ADDR_INC ((uint8_t)0x04)
+#define TM1628_DATA_DEBUG ((uint8_t)0x08)
+
+#define TM1628_CTRL_DEFAULT ((uint8_t)0x80)
+#define TM1628_CTRL_BRIGHTNESS ((uint8_t)0x07)
+#define TM1628_CTRL_ENABLE ((uint8_t)0x08)
+
+#define TM1628_ADDR_DEFAULT ((uint8_t)0xC0)
+#define TM1628_ADDR_DISP_ADDR ((uint8_t)0x0F)
+
+#define TM1628_BRIGHTNESS_MIN (0)
+#define TM1628_BRIGHTNESS_MAX (7)
+#define TM1628_DISP_REG_NUM (14)
+
+struct tm1628_priv {
+	struct spi_slave *spi;
+	const char *model;
+	bool enabled;
+	uint8_t brightness;
+	uint8_t disp_regs[TM1628_DISP_REG_NUM];
+};
+
+static uint8_t tm1628_msb2lsb(uint8_t msb)
+{
+	uint8_t lsb = msb;
+	lsb = (lsb * 0x0202020202ULL & 0x010884422010ULL) % 1023;
+	return lsb;
+}
+
+static int tm1628_sendcmd(struct udevice *dev, uint8_t cmd)
+{
+	int ret = 0;
+	uint8_t cmd_lsb = 0;
+
+	cmd_lsb = tm1628_msb2lsb(cmd);
+	ret = dm_spi_xfer(dev, 8, &cmd_lsb, NULL, SPI_XFER_ONCE);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int tm1628_write_dispreg(struct udevice *dev, uint8_t addr, int size)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int i, ret = 0, len = 0;
+	uint8_t cmd = 0, cmd_lsb = 0;
+	uint8_t regs[TM1628_DISP_REG_NUM] = { 0 };
+
+	dm_spi_claim_bus(dev);
+
+	/* Send write dispreg command */
+	cmd = TM1628_DATA_DEFAULT;
+	cmd &= ~TM1628_DATA_RW_DIR;
+	cmd &= ~TM1628_DATA_ADDR_INC;
+	ret = tm1628_sendcmd(dev, cmd);
+	if (ret)
+		goto xfer_failed;
+
+	/* Send dispreg addr */
+	cmd = TM1628_ADDR_DEFAULT;
+	if (addr > (TM1628_DISP_REG_NUM - 1))
+		cmd |= (TM1628_DISP_REG_NUM - 1) & TM1628_ADDR_DISP_ADDR;
+	else
+		cmd |= addr & TM1628_ADDR_DISP_ADDR;
+	cmd_lsb = tm1628_msb2lsb(cmd);
+	ret = dm_spi_xfer(dev, 8, &cmd_lsb, NULL, SPI_XFER_BEGIN);
+	if (ret)
+		goto xfer_failed;
+
+	/* Send dispreg data */
+	if (size > TM1628_DISP_REG_NUM - addr)
+		len = TM1628_DISP_REG_NUM - addr;
+	else
+		len = size;
+
+	for (i = 0; i < TM1628_DISP_REG_NUM; i++) {
+		regs[i] = tm1628_msb2lsb(priv->disp_regs[i]);
+	}
+
+	ret = dm_spi_xfer(dev, len * 8, &regs[addr], NULL, SPI_XFER_END);
+	if (ret)
+		goto xfer_failed;
+
+xfer_failed:
+	dm_spi_release_bus(dev);
+	return ret;
+}
+
+int tm1628_send_str(struct udevice *dev, const char *str)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int ret = 0;
+
+	if (strncmp(priv->model, "X96AIR", 6) == 0) {
+		tm1628_x96air_string(str, priv->disp_regs);
+	} else {
+		log_err("Unknown VFD model: %s\n", priv->model);
+	}
+
+	ret = tm1628_write_dispreg(dev, 0, TM1628_DISP_REG_NUM);
+
+	return ret;
+}
+
+int tm1628_send_icon(struct udevice *dev, const char *name, bool en)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int ret = 0;
+
+	if (strncmp(priv->model, "X96AIR", 6) == 0) {
+		tm1628_x96air_icon(name, en, priv->disp_regs);
+	} else {
+		log_err("Unknown VFD model: %s\n", priv->model);
+	}
+
+	ret = tm1628_write_dispreg(dev, 0, TM1628_DISP_REG_NUM);
+
+	return ret;
+}
+
+int tm1628_set_enabled(struct udevice *dev, bool val)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int ret = 0;
+	uint8_t cmd = 0;
+
+	if (priv->enabled == val)
+		goto done;
+
+	priv->enabled = val;
+
+	dm_spi_claim_bus(dev);
+
+	cmd = TM1628_MODE_7DIG_CMD;
+	ret = tm1628_sendcmd(dev, cmd);
+	if (ret)
+		goto xfer_failed;
+
+	cmd = TM1628_CTRL_DEFAULT;
+	cmd |= (priv->brightness & TM1628_CTRL_BRIGHTNESS);
+	if (priv->enabled)
+		cmd |= TM1628_CTRL_ENABLE;
+	ret = tm1628_sendcmd(dev, cmd);
+	if (ret)
+		goto xfer_failed;
+
+xfer_failed:
+	dm_spi_release_bus(dev);
+
+done:
+	return ret;
+}
+
+int tm1628_set_brightness(struct udevice *dev, uint8_t val)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int ret = 0;
+	uint8_t cmd = 0;
+
+	if (priv->brightness == val)
+		goto done;
+
+	if (priv->brightness > TM1628_BRIGHTNESS_MAX)
+		priv->brightness = TM1628_BRIGHTNESS_MAX;
+	else
+		priv->brightness = val;
+
+	dm_spi_claim_bus(dev);
+
+	cmd = TM1628_CTRL_DEFAULT;
+	cmd |= (priv->brightness & TM1628_CTRL_BRIGHTNESS);
+	if (priv->enabled)
+		cmd |= TM1628_CTRL_ENABLE;
+	ret = tm1628_sendcmd(dev, cmd);
+	if (ret)
+		goto xfer_failed;
+
+xfer_failed:
+	dm_spi_release_bus(dev);
+
+done:
+	return ret;
+}
+
+int tm1628_clear(struct udevice *dev)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+	int ret = 0;
+
+	memset(priv->disp_regs, 0, TM1628_DISP_REG_NUM);
+	ret = tm1628_write_dispreg(dev, 0, TM1628_DISP_REG_NUM);
+
+	return ret;
+}
+
+static const struct vfd_ops tm1628_ops = {
+	.send_str = tm1628_send_str,
+	.send_icon = tm1628_send_icon,
+	.set_enabled = tm1628_set_enabled,
+	.set_brightness = tm1628_set_brightness,
+	.reset = tm1628_clear,
+};
+
+static int tm1628_probe(struct udevice *dev)
+{
+	struct tm1628_priv *priv = dev_get_priv(dev);
+
+	priv->spi = dev_get_parent_priv(dev);
+	if (!priv->spi->max_hz)
+		priv->spi->max_hz = TM1628_SPI_MAX_CLOCK;
+	priv->spi->mode = SPI_MODE_3;
+	priv->spi->wordlen = SPI_DEFAULT_WORDLEN;
+
+	priv->model = ofnode_read_string(dev_ofnode(dev), "model");
+	priv->enabled = false;
+	priv->brightness = 0;
+	memset(priv->disp_regs, 0, TM1628_DISP_REG_NUM);
+
+	log_info("VFD:   model: %s\n", priv->model);
+
+	tm1628_write_dispreg(dev, 0, TM1628_DISP_REG_NUM);
+	tm1628_set_brightness(dev, TM1628_BRIGHTNESS_MAX);
+	tm1628_set_enabled(dev, true);
+
+	return 0;
+}
+
+static const struct udevice_id tm1628_ids[] = { { .compatible = "vfd,tm1628" },
+						{} };
+
+U_BOOT_DRIVER(vfd_tm1628) = {
+	.name = "vfd_tm1628",
+	.id = UCLASS_VFD,
+	.ops = &tm1628_ops,
+	.of_match = tm1628_ids,
+	.probe = tm1628_probe,
+	.priv_auto = sizeof(struct tm1628_priv),
+};
diff --git a/drivers/vfd/vfd_tm1628_x96air.h b/drivers/vfd/vfd_tm1628_x96air.h
new file mode 100644
index 0000000000..f87b623246
--- /dev/null
+++ b/drivers/vfd/vfd_tm1628_x96air.h
@@ -0,0 +1,81 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#ifndef _VFD_TM168_X96AIR_H_
+#define _VFD_TM168_X96AIR_H_
+
+#include "vfd_fonts.h"
+
+#define SEG_DIGITS_NUM 4
+#define SEG_GRID_NUM 7
+
+#define ICON_SEG_MASK 0x08
+#define ICON_APPS_GRID 0
+#define ICON_SETUP_GRID 1
+#define ICON_USB_GRID 2
+#define ICON_CARD_GRID 3
+#define ICON_COLON_GRID 4
+#define ICON_HD_GRID 5
+#define ICON_CVBS_GRID 6
+
+const uint8_t seg_mapping[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40 };
+
+void tm1628_x96air_string(const char *str, unsigned char *buf)
+{
+	int i = 0, j = 0, len;
+
+	len = strlen(str);
+	if (len > SEG_DIGITS_NUM) {
+		len = SEG_DIGITS_NUM;
+	}
+
+	for (i = 0; i < len; i++) {
+		unsigned char ascii = str[i];
+
+		for (j = 0; j < SEG_GRID_NUM; j++) {
+			buf[j * 2] =
+				seg_decode_tab[ascii] & seg_mapping[j] ?
+					      buf[j * 2] | 1 << (SEG_GRID_NUM - i) :
+					      buf[j * 2] & ~(1 << (SEG_GRID_NUM - i));
+		}
+	}
+}
+
+void tm1628_x96air_icon(const char *str, bool en, unsigned char *buf)
+{
+	if (strncmp(str, "APPS", 4) == 0) {
+		buf[2 * ICON_APPS_GRID] =
+			en ? buf[2 * ICON_APPS_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_APPS_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "SETUP", 5) == 0) {
+		buf[2 * ICON_SETUP_GRID] =
+			en ? buf[2 * ICON_SETUP_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_SETUP_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "USB", 3) == 0) {
+		buf[2 * ICON_USB_GRID] =
+			en ? buf[2 * ICON_USB_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_USB_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "CARD", 4) == 0) {
+		buf[2 * ICON_CARD_GRID] =
+			en ? buf[2 * ICON_CARD_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_CARD_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "COLON", 5) == 0) {
+		buf[2 * ICON_COLON_GRID] =
+			en ? buf[2 * ICON_COLON_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_COLON_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "HD", 2) == 0) {
+		buf[2 * ICON_HD_GRID] =
+			en ? buf[2 * ICON_HD_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_HD_GRID] & ~ICON_SEG_MASK;
+	} else if (strncmp(str, "CVBS", 4) == 0) {
+		buf[2 * ICON_CVBS_GRID] =
+			en ? buf[2 * ICON_CVBS_GRID] | ICON_SEG_MASK :
+				   buf[2 * ICON_CVBS_GRID] & ~ICON_SEG_MASK;
+	}
+}
+
+#endif /* _VFD_TM168_X96AIR_H_ */
diff --git a/include/dm/uclass-id.h b/include/dm/uclass-id.h
index d800f679d5..b793ea7311 100644
--- a/include/dm/uclass-id.h
+++ b/include/dm/uclass-id.h
@@ -120,6 +120,7 @@ enum uclass_id {
 	UCLASS_USB_DEV_GENERIC,	/* USB generic device */
 	UCLASS_USB_HUB,		/* USB hub */
 	UCLASS_USB_GADGET_GENERIC,	/* USB generic device */
+	UCLASS_VFD,		/* Vacuum fluorescent display device */
 	UCLASS_VIDEO,		/* Video or LCD device */
 	UCLASS_VIDEO_BRIDGE,	/* Video bridge, e.g. DisplayPort to LVDS */
 	UCLASS_VIDEO_CONSOLE,	/* Text console driver for video device */
diff --git a/include/vfd.h b/include/vfd.h
new file mode 100644
index 0000000000..c2e414e976
--- /dev/null
+++ b/include/vfd.h
@@ -0,0 +1,29 @@
+// SPDX-License-Identifier:	GPL-2.0+
+/*
+ *
+ * Copyright (c) 2021 Chen Caidy
+ *
+ */
+
+#ifndef _VFD_H_
+#define _VFD_H_
+
+struct udevice;
+
+int vfd_send_str(struct udevice *dev, const char *str);
+int vfd_send_icon(struct udevice *dev, const char *name, bool en);
+int vfd_set_enabled(struct udevice *dev, bool val);
+int vfd_set_brightness(struct udevice *dev, uint8_t val);
+int vfd_reset(struct udevice *dev);
+
+int vfd_init(void);
+
+struct vfd_ops {
+	int (*send_str)(struct udevice *dev, const char *str);
+	int (*send_icon)(struct udevice *dev, const char *name, bool en);
+	int (*set_enabled)(struct udevice *dev, bool val);
+	int (*set_brightness)(struct udevice *dev, uint8_t val);
+	int (*reset)(struct udevice *dev);
+};
+
+#endif /* _VFD_H_ */
